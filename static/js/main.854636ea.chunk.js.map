{"version":3,"sources":["components/Wrapper.js","components/Navbar.js","components/FriendCard.js","components/Title.js","App.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navbar","href","message","score","highScore","FriendCard","alt","name","src","image","onClick","handleClick","id","Title","App","state","friends","cardArray","unclicked","shuffleCards","i","length","j","Math","floor","random","_ref","console","log","undefined","_this","find","item","setState","newCard","filter","_this2","this","components_Navbar","components_Wrapper","components_Title","map","friend","components_FriendCard","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"q+CAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,WCa1BC,MAdf,SAAgBN,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,cAAjC,eAGCN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,IAA+BJ,EAAMQ,SACrCP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,WAAoCJ,EAAMS,MAA1C,iBAA+DT,EAAMU,aCe5DC,MArBf,SAAoBX,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKS,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,MAAOC,QAAS,WAC/ChB,EAAMiB,YAAajB,EAAMkB,QAG7BjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,2BCAOgB,MAVf,SAAenB,GACb,OAASC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACxBH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,qFACCH,EAAMK,WC8FMe,6MAjFbC,MAAQ,CACNZ,MAAO,EACPC,UAAW,EACXY,UACAC,UAAW,GACXC,UAAWF,EACXd,QAAS,8BAMXiB,aAAe,WAEb,IAAK,IAAIC,EAAIJ,EAAQK,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC3C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAEhB,CAACV,EAAQM,GAAIN,EAAQI,IAA/CJ,EAAQI,GAFkCM,EAAA,GAE9BV,EAAQM,GAFsBI,EAAA,OAO/Cf,YAAc,SAACC,GAMb,GALAe,QAAQC,IAAI,aACZD,QAAQC,IAAIhB,QAIAiB,IAFCC,EAAKf,MAAMG,UAAUa,KAAK,SAAAC,GAAI,OAAIA,EAAKpB,KAAMA,IAGxDe,QAAQC,IAAI,SACZE,EAAKG,SAAS,CACZ9B,MAAO,EACPD,QAAS4B,EAAKf,MAAMb,QAAU,mBAC9BE,UAAY0B,EAAKf,MAAMZ,MAAQ2B,EAAKf,MAAMX,UAAY0B,EAAKf,MAAMZ,MAAQ2B,EAAKf,MAAMX,UACpFY,QAASA,EACTE,UAAWF,QAIV,CAEH,IAAMkB,EAAUJ,EAAKf,MAAMG,UAAUiB,OAAO,SAAAH,GAAI,OAAIA,EAAKpB,KAAOA,IAChEe,QAAQC,IAAI,WACZE,EAAKG,SAAS,CACZ9B,MAAO2B,EAAKf,MAAMZ,MAAQ,EAC1Be,UAAWgB,EACXhC,QAAS4B,EAAKf,MAAMb,QAAU,2BAGhC4B,EAAKX,yFAMA,IAAAiB,EAAAC,KACP,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAD,CACFnC,MAAOkC,KAAKtB,MAAMZ,MAClBD,QAASmC,KAAKtB,MAAMb,QACpBE,UAAWiC,KAAKtB,MAAMX,YAErBT,EAAAC,EAAAC,cAAC0C,EAAD,KACA5C,EAAAC,EAAAC,cAAC2C,EAAD,MACCH,KAAKtB,MAAMC,QAAQyB,IAAI,SAAAC,GAAM,OAC5B/C,EAAAC,EAAAC,cAAC8C,EAAD,CACE/B,GAAI8B,EAAO9B,GACXgC,IAAKF,EAAO9B,GACZH,MAAOiC,EAAOjC,MACdE,YAAeyB,EAAKzB,yBAvEbkC,aCZlBC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.854636ea.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar\">\n     <a className=\"navbar-brand\" href=\"index.html\">\n        Clicky Game\n      </a>\n      <span className=\"navMessage\"> {props.message}</span>\n      <span className=\"navScore\"> Score: {props.score} | Top Score: {props.highScore}</span>\n    </nav>\n  )\n\n  \n}\n\nexport default Navbar;\n","import React from \"react\";\n\n\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} onClick={()=>{\n          props.handleClick (props.id)\n        }}/>\n      </div>\n      <div className=\"content\">\n        <ul>\n          {/* <li>\n            <strong>Name:</strong> {props.name}\n          </li> */}\n        \n        </ul>\n      </div>\n    \n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\n\n\nfunction Title(props) {\n  return  (<div className=\"title\">\n  <h1>Clicky/Memory Game</h1>\n  <p>Click on an image to earn points, but don't click on any more than once!</p>\n  {props.children}\n  </div>);\n  \n  \n}\n\nexport default Title;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\n\nimport FriendCard from \"./components/FriendCard\";\nimport friends from \"./friends.json\";\nimport \"./style.css\";\nimport Title from \"./components/Title\";\n\n// The application should render different images (of your choice) to the screen. Each image should listen for click events.\n\n// The application should keep track of the user's score. The user's score should be incremented when clicking an image for the first time. The user's score should be reset to 0 if they click the same image more than once.\n\n// Every time an image is clicked, the images rendered to the page should shuffle themselves in a random order.\n\n// Once the user's score is reset after an incorrect guess, the game should restart.\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    score: 0,\n    highScore: 0,\n    friends,\n    cardArray: [],\n    unclicked: friends,\n    message: \"Click an image to begin!\"\n  };\n\n  \n\n\n  shuffleCards = () => {\n    // Math.floor((Math.random() * 13) + 1);\n    for (let i = friends.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [friends[i], friends[j]] = [friends[j], friends[i]];\n  }\n    \n  }\n\n  handleClick = (id) => {\n    console.log(\"Clicked!!\");\n    console.log(id);\n    //find if image clicked id to see if it's been clicked yet\n    const card = this.state.unclicked.find(item => item.id ===id);\n    //if yes then restart game\n    if(card === undefined) {\n      console.log(\"loser\")\n      this.setState({\n        score: 0,\n        message: this.state.message = \"Wrong, you lose!\",\n        highScore: (this.state.score > this.state.highScore ? this.state.score : this.state.highScore),\n        friends: friends,\n        unclicked: friends\n        \n      })\n    }\n    else {\n      //filter thru array if an image has not been clicked update score\n      const newCard = this.state.unclicked.filter(item => item.id !== id);\n      console.log(\"correct\")\n      this.setState({\n        score: this.state.score + 1,\n        unclicked: newCard,\n        message: this.state.message = \"You guessed Correctly!\", \n        \n      })\n      this.shuffleCards()\n    }\n  \n  }\n\n\n  render() {\n    return (\n      <div>\n        <Navbar \n      score={this.state.score}\n      message={this.state.message}\n      highScore={this.state.highScore}\n      />\n       <Wrapper>\n       <Title />\n       {this.state.friends.map(friend => (\n         <FriendCard\n           id={friend.id}\n           key={friend.id}\n           image={friend.image}\n           handleClick = {this.handleClick}\n         />\n       ))}\n        \n    </Wrapper>  \n    </div>\n  \n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}